#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
@File    :   main.py
@Time    :   2023/10/10 22:50:58
@Author  :   Li Ruilong
@Version :   1.0
@Contact :   liruilonger@gmail.com
@Desc    :   adaface demo ÈÄöËøáÈ¢ÑËÆ≠ÁªÉÊ®°ÂûãËé∑ÂèñÂêàÈÄÇ‰∫∫ËÑ∏
"""

# here put the import lib


import net
import torch
import numpy as np
import yaml_utils as Yaml
import utils
from imutils import paths
class AdaFaceFeature:
    """
    @Time    :   2023/10/10 22:52:55
    @Author  :   liruilonger@gmail.com
    @Version :   1.0
    @Desc    :   AdaFace ‰∫∫ËÑ∏ÁâπÂæÅÂÄºÈ¢ÑÊµã
    """
    __instance = None
    
    def __new__(cls, *args, **kwargs):

        if cls.__instance is None:
            cls.__instance = super().__new__(cls)
        return cls.__instance

    def __init__(self,file_name="config/config.yaml") -> None:
        """
        @Time    :   2023/10/10 22:54:19
        @Author  :   liruilonger@gmail.com
        @Version :   1.0
        @Desc    :   ÂàùÂßãÂåñÈÖçÁΩÆ
        """
        self.config = Yaml.get_yaml_config(file_name)
        self.adaface_config = self.config['adaface']['zero']
        self.adaface_models = {self.adaface_config['model']: self.adaface_config['model_file'],}
        pass

    def load_pretrained_model(self):
        """
        @Time    :   2023/10/10 23:03:07
        @Author  :   liruilonger@gmail.com
        @Version :   1.0
        @Desc    :   Âä†ËΩΩÊ®°Âûã
        """
        
        # load model and pretrained statedict
        architecture = self.adaface_config['model']
        assert architecture in self.adaface_models.keys()
        model = net.build_model(architecture)
        statedict = torch.load(
            self.adaface_models[architecture], map_location=torch.device('cpu'))['state_dict']
        model_statedict = {key[6:]: val for key,
                           val in statedict.items() if key.startswith('model.')}
        model.load_state_dict(model_statedict)
        model.eval()
        self.model = model
        return self



    def to_input(self,pil_rgb_image):
        """
        @Time    :   2023/10/10 23:08:09
        @Author  :   liruilonger@gmail.com
        @Version :   1.0
        @Desc    :   PIL RGBÂõæÂÉèÂØπË±°ËΩ¨Êç¢‰∏∫PyTorchÊ®°ÂûãÁöÑËæìÂÖ•Âº†Èáè
        """
        tensor = None
        try:
            np_img = np.array(pil_rgb_image)
            brg_img = ((np_img[:, :, ::-1] / 255.) - 0.5) / 0.5
            tensor = torch.tensor([brg_img.transpose(2, 0,1)]).float()
        except Exception :
            return tensor    
        return tensor




    def b64_get_represent(self,path):
        """
        @Time    :   2023/10/10 23:12:19
        @Author  :   liruilonger@gmail.com
        @Version :   1.0
        @Desc    :   Ëé∑ÂèñËÑ∏ÈÉ®ÁâπÂæÅÂêëÈáè
        """
        
        feature = None
        
        aligned_rgb_img =  utils.get_base64_to_Image(path).convert('RGB')
        bgr_tensor_input = self.to_input(aligned_rgb_img)
        if bgr_tensor_input is not None:
            feature, _ = self.model(bgr_tensor_input)
        else:
           print(f"Êó†Ê≥ïÊèêÂèñËÑ∏ÈÉ®ÁâπÂæÅÂêëÈáè ü•∑ü•∑ü•∑")     
        return feature
    

    def byte_get_represent(self,path):
        """
        @Time    :   2023/10/10 23:12:19
        @Author  :   liruilonger@gmail.com
        @Version :   1.0
        @Desc    :   Ëé∑ÂèñËÑ∏ÈÉ®ÁâπÂæÅÂêëÈáè
        """
        
        feature = None
        
        aligned_rgb_img =  utils.get_byte_to_Image(path).convert('RGB')
        bgr_tensor_input = self.to_input(aligned_rgb_img)
        if bgr_tensor_input is not None:
            feature, _ = self.model(bgr_tensor_input)
        else:
           print(f"Êó†Ê≥ïÊèêÂèñËÑ∏ÈÉ®ÁâπÂæÅÂêëÈáè ü•∑ü•∑ü•∑")     
        return feature
    

    def findCosineDistance(self,source_representation, test_representation):
        """
        @Time    :   2023/06/16 12:19:27
        @Author  :   liruilonger@gmail.com
        @Version :   1.0
        @Desc    :   ËÆ°ÁÆó‰∏§‰∏™ÂêëÈáè‰πãÈó¥ÁöÑ‰ΩôÂº¶Áõ∏‰ººÂ∫¶ÂæóÂàÜ
        """
        import torch.nn.functional as F
        return F.cosine_similarity(source_representation, test_representation)
    




if __name__ == '__main__':
    print("Ëé∑ÂèñÁâπÂæÅÂºÄÂßã")
    adaface =  AdaFaceFeature()
    adaface.load_pretrained_model()
    #Â§ÑÁêÜËøáÁöÑ‰∫∫ËÑ∏ÁÖßÁâáÔºå‰ª•ÂÅöÈù¢ÈÉ®ÂØπÈΩêÂ§ÑÁêÜ,Â§ßÂ∞èÔºö 112*112
    dir_path = "./mtcnn/"
    #byte ÊµãËØï
    for img_path  in paths.list_images(dir_path):
        feature = adaface.byte_get_represent(utils.get_image_path_to_byte(img_path))
        print(utils.feature2json(feature))
        

    # b64 ÊµãËØï
    for i in range(0,100):
        pass
        #feature =  adaface.b64_get_represent("")
        #print(utils.feature2byte(feature))
        #print(utils.feature2json(feature))
